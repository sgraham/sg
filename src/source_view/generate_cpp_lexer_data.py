# Simple script to shamelessly rip off regex lexers in pygments and convert
# them to C++ format.

from pygments.lexers import CppLexer
import os
import pprint
import pygments.token
import sys


def fix_regex(string):
  return string.encode('string_escape').replace('"', '\\"')


def fix_action(action):
  action = str(action)
  action = action.replace('Token.', 'Lexer::')
  action = action.replace('.', '')
  return action


def main():
  out = open('cpp_lexer.cc', 'wb')

  print >>out, '// THIS FILE AUTOGENERATED BY %s. DO NOT EDIT.' % (
      os.path.basename(__file__))
  print >>out
  print >>out, '#include "lexer.h"'
  print >>out, '#include "lexer_state.h"'
  print >>out
  print >>out, 'Lexer* MakeCppLexer() {'
  print >>out, '  Lexer* lexer = new Lexer("C++");'
  print >>out

  print >>out, '  // States'
  for state, regexes in sorted(CppLexer.tokens.iteritems()):
    print >>out, '  LexerState* %s = lexer->AddState("%s");' % (state, state)
  print >>out

  for state, regexes in sorted(CppLexer.tokens.iteritems()):
    print >>out, '  // Transitions for %s' % state
    print >>out, '  TokenDefinitions %s_defs;' % state
    for item in regexes:
      assert len(item) in (2, 3)
      if len(item) == 2:
        regex, action = item
        if not isinstance(action, pygments.token._TokenType):
          print >>out, '  // TODO(%s)' % type(action),
        print >>out, '  %s_defs.Add("%s", %s);' % (
            state, fix_regex(regex), fix_action(action))
      elif len(item) == 3:
        regex, action, new_state = item
        if new_state == '#pop':
          new_state = 'Lexer::Pop'
        elif new_state == '#push':
          new_state = 'Lexer::Push'
        if not isinstance(action, pygments.token._TokenType):
          print >>out, '  // TODO(%s)' % type(action),
        print >>out, '  %s_defs.AddWithTransition("%s", %s, %s);' % (
            state, fix_regex(regex), fix_action(action), new_state)
    print >>out, '  %s->SetTokenDefinitions(%s_defs);' % (state, state)
    print >>out

  print >>out, '  return lexer;'
  print >>out, '}'

  out = open('cpp_lexer.h', 'wb')
  print >>out, '// THIS FILE AUTOGENERATED BY %s. DO NOT EDIT.' % (
      os.path.basename(__file__))
  print >>out
  print >>out, '#ifndef CPP_LEXER_H_'
  print >>out, '#define CPP_LEXER_H_'
  print >>out
  print >>out, 'class Lexer;'
  print >>out, 'Lexer* MakeCppLexer();'
  print >>out
  print >>out, '#endif  // CPP_LEXER_H_'


if __name__ == '__main__':
  main()
