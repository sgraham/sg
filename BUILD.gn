# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

static_library("glfw") {
  sources = [
    "third_party/glfw/src/context.c",
    "third_party/glfw/src/init.c",
    "third_party/glfw/src/input.c",
    "third_party/glfw/src/monitor.c",
    "third_party/glfw/src/vulkan.c",
    "third_party/glfw/src/window.c",
  ]
  if (is_win) {
    defines = [
      "_GLFW_WIN32",
    ]
    cflags = [
      "/wd4100",
      "/wd4152",
      "/wd4204",
      "/wd4244",
    ]
    sources += [
      "third_party/glfw/src/egl_context.c",
      "third_party/glfw/src/wgl_context.c",
      "third_party/glfw/src/win32_init.c",
      "third_party/glfw/src/win32_joystick.c",
      "third_party/glfw/src/win32_monitor.c",
      "third_party/glfw/src/win32_time.c",
      "third_party/glfw/src/win32_tls.c",
      "third_party/glfw/src/win32_window.c",
    ]
  } else if (is_mac) {
    defines = [
      "_GLFW_COCOA",
      "_GLFW_USE_CHDIR",
      "_GLFW_USE_MENUBAR",
      "_GLFW_USE_RETINA",
    ]
    cflags = [
      "-Wno-deprecated-declarations",
    ]
    include_dirs = [
      "/usr/include/sys",
    ]
    sources += [
      "third_party/glfw/src/cocoa_init.m",
      "third_party/glfw/src/cocoa_joystick.m",
      "third_party/glfw/src/cocoa_monitor.m",
      "third_party/glfw/src/cocoa_window.m",
      "third_party/glfw/src/cocoa_time.c",
      "third_party/glfw/src/posix_tls.c",
      "third_party/glfw/src/nsgl_context.m",
    ]
  }
}

static_library("re2") {
  sources = [
    "third_party/re2/re2/bitstate.cc",
    "third_party/re2/re2/compile.cc",
    "third_party/re2/re2/dfa.cc",
    "third_party/re2/re2/filtered_re2.cc",
    "third_party/re2/re2/mimics_pcre.cc",
    "third_party/re2/re2/nfa.cc",
    "third_party/re2/re2/onepass.cc",
    "third_party/re2/re2/parse.cc",
    "third_party/re2/re2/perl_groups.cc",
    "third_party/re2/re2/prefilter.cc",
    "third_party/re2/re2/prefilter_tree.cc",
    "third_party/re2/re2/prog.cc",
    "third_party/re2/re2/re2.cc",
    "third_party/re2/re2/regexp.cc",
    "third_party/re2/re2/set.cc",
    "third_party/re2/re2/simplify.cc",
    "third_party/re2/re2/stringpiece.cc",
    "third_party/re2/re2/tostring.cc",
    "third_party/re2/re2/unicode_casefold.cc",
    "third_party/re2/re2/unicode_groups.cc",
    "third_party/re2/util/hash.cc",
    "third_party/re2/util/logging.cc",
    "third_party/re2/util/pcre.cc",
    "third_party/re2/util/random.cc",
    "third_party/re2/util/rune.cc",
    "third_party/re2/util/stringprintf.cc",
    "third_party/re2/util/strutil.cc",
    "third_party/re2/util/valgrind.cc",
  ]

  if (is_win) {
    cflags = [
      "/wd4100",
      "/wd4127",
      "/wd4244",
      "/wd4456",
      "/wd4457",
    ]

    sources += [ "third_party/re2/util/threadwin.cc" ]
  } else {
    sources += [ "third_party/re2/util/thread.cc" ]
  }

  include_dirs = [ "//third_party/re2" ]
}

static_library("sglib") {
  deps = [
    ":re2",
    ":glfw",
  ]

  sources = [
    "src/empty.cc",
    "src/source_view/cpp_lexer.cc",
    "src/source_view/lexer.cc",
    "src/source_view/lexer_state.cc",
    #"src/dbgeng/debugger_dbgeng.cc",
    #"src/docking_resizer.cc",
    #"src/docking_split_container.cc",
    #"src/docking_tool_window.cc",
    #"src/docking_workspace.cc",
    #"src/focus.cc",
    #"src/gfx_win.cc",
    #"src/scroll_helper.cc",
    #"src/skin.cc",
    #"src/source_view/cpp_lexer.cc",
    #"src/source_view/lexer.cc",
    #"src/source_view/lexer_state.cc",
    #"src/source_view/source_view.cc",
    #"src/text_edit.cc",
    #"src/tool_window_dragger.cc",
    #"src/tree_grid.cc",
    #"src/widget.cc",
  ]

  include_dirs = [
    "//src",
    "//third_party/re2",
  ]
}


executable("sg") {
  deps = [
    ":sglib",
  ]

  sources = [
    "src/main.cc",
    "src/sg.rc",
    "third_party/imgui/imgui.cpp",
    "third_party/imgui/imgui_draw.cpp",
  ]

  include_dirs = [
    "//src",
    "//third_party/glfw/include",
  ]

  if (is_win) {
    libs = [
      "gdi32.lib",
      "opengl32.lib",
      "shcore.lib",
      "shell32.lib",
      "user32.lib",
    ]
  } else if (is_mac) {
    libs = [
      "OpenGL.framework",
      "Cocoa.framework",
      "IOKit.framework",
      "CoreVideo.framework",
    ]
  }
}

executable("sg_test") {
  deps = [
    ":sglib",
  ]
  sources = [
    #"src/docking_test.cc",
    "src/source_view/lexer_test.cc",
    #"src/test_stubs.cc",
    #"src/tree_grid_test.cc",
    "third_party/googletest/googletest/src/gtest-all.cc",
    "third_party/googletest/googletest/src/gtest_main.cc",
  ]

  include_dirs = [
    "//src",
    "//third_party/re2",
    "//third_party/googletest/googletest/include",
    "//third_party/googletest/googletest",
  ]

  if (is_win) {
    libs = [
      "gdi32.lib",
      "user32.lib",
    ]
  } else if (is_mac) {
    libs = [
      "Cocoa.framework",
    ]
  }
}
